#pragma once
#include "technique.h"

struct DirectionalLight //// направленный свет
{
	vec3 Color; //// цвет. Цвет определяет какой канал цвета может отражен и в какой интенсивности
	//Пример: если цвет (1.0, 0.5, 0.0), то красный канал отразится полностью, зеленый наполовину, а синий потеряется целиком
	float AmbientIntensity; // фоновая интенсивность
	//Фоновая интенсивность определяет насколько темный или яркий свет. Вы можете иметь полностью белый с интенсивностью 1.0, 
	//тогда объект будет хорошо освещен, или 0.1, тогда объект разглядеть можно будет только с большим трудом.
	vec3 Direction; //направление в виде 3 вектора, указываемое в мировом пространстве 
	float DiffuseIntensity; //интенсивность рассеивания 
};////

class LightingTechnique : public Technique //представляет собой инвентарь света
{
public:
	LightingTechnique();
	virtual bool Init(); //вызывает Technique::AddShader() и Techique::Finalize() для генерации программы GLSL.

	void SetWVP(const mat4* WVP);
	//void SetWorldMatrix(const mat4& WVP);////
	void SetWorldMatrix(const mat4* WVP);////
	void SetTextureUnit(unsigned int TextureUnit); 
	void SetDirectionalLight(const DirectionalLight& Light);

	void SetEyeWorldPos(const vec3& EyeWorldPos); /////
	void SetMatSpecularIntensity(float Intensity); /////
	void SetMatSpecularPower(float Power); /////

private:
	GLuint m_WVPLocation;
	GLuint m_WorldMatrixLocation;////
	GLuint m_samplerLocation;
	//GLuint m_dirLightColorLocation;
	//GLuint m_dirLightAmbientIntensityLocation;
	GLuint m_eyeWorldPosition; // позиция глаза
	GLuint m_matSpecularIntensityLocation; // интенсивность отражения
	GLuint m_matSpecularPowerLocation; // коэффициент материала

	struct {////
		GLuint Color;
		GLuint AmbientIntensity;
		GLuint Direction;
		GLuint DiffuseIntensity;
	} m_dirLightLocation;////
};